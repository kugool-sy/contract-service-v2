
// import {XenonNacosClient} from "xenon-nacos-client"

import path from "path";

import dotenv from "dotenv";
let envFile=process.env.NODE_ENV
if(!envFile){
    envFile='../.env'
}else{
    envFile="./.env."+ envFile
}
const envPath=path.join(__dirname,envFile)
console.log("envPath="+envPath)
dotenv.config({ path: envPath })


import config from './config/index'
config['env']=process.env.NODE_ENV as string
config['serviceName']=process.env.APPLICATION_NAME as string
config['port']=parseInt(process.env.SERVER_PORT as string)

config['DB_SERVER']= process.env.DB_SERVER as string
config['DB_PORT']= process.env.DB_PORT as string
config['DB_NAME']= process.env.DB_NAME as string

config['provider_key'] = process.env.PROVIDER_KEY as string
config['chain_type'] = process.env.CHAIN_TYPE as string
config['chain_id'] = Number(process.env.CHAIN_ID)

config['private_key'] = process.env.PRI_KEY as string

config['db_url'] = process.env.DB_URL as string


config['notary_account_address'] = process.env.ACCOUNT_NOTARY_DATA as string
config['notary_kms_kid'] = process.env.KMS_KEY_ID_NOTARY_DATA as string
config['notary_contract_address'] = process.env.NOTARY_CONTRACT_ADDRESS as string

config['miner_account_address'] = process.env.ACCOUNT_MINE_REGIST as string
config['miner_regist_kms_kid'] = process.env.KMS_KEY_ID_MINER_REGIST as string
config['miner_contract_address'] = process.env.MINER_CONTRACT_ADDRESS as string
config['miner_contract_domain_name'] = process.env.MINER_CONTRACT_DOMAIN_NAME as string
config['miner_contract_version'] = process.env.MINER_CONTRACT_VERSION as string


config['arec_issue_account_address'] = process.env.ACCOUNT_AREC_ISSUENCE as string
config['arec_issue_kms_kid'] = process.env.KMS_KEY_ID_AREC_ISSUENCE as string
config['arec_issue_contract_address'] = process.env.AREC_ISSUENCE_CONTRACT_ADDRESS as string


config['withdraw_contract_address'] = process.env.WITHDRAW_CONTRACT_ADDRESS as string
config['withdraw_contract_domain_name'] = process.env.WITHDRAW_CONTRACT_DOMAIN_NAME as string
config['withdraw_contract_version'] = process.env.WITHDRAW_CONTRACT_VERSION as string
config['reward_withdraw_kms_kid'] = process.env.KMS_KEY_ID_REWARD_WITHDRAW as string


config['token_contract_address'] = process.env.TOKEN_CONTRACT_ADDRESS as string
config['token_contract_domain_name'] = process.env.TOKEN_CONTRACT_DOMAIN_NAME as string
config['token_contract_version'] = process.env.TOKEN_CONTRACT_VERSION as string

config['subgraph_url_miner'] = process.env.THE_GRAPH_QUERY_URL_ARKREEN_MINER as string
config['subgraph_url_rec'] = process.env.THE_GRAPH_QUERY_URL_ARKREEN_REC_ISSUENCE as string


config['rpc_service_notary_url'] = process.env.RPC_SERVICE_NOTARY_URL as string
config['rpc_service_remote_miner_url'] = process.env.RPC_SERVICE_REMOTE_MINER_URL as string
config['rpc_service_standard_miner_url'] = process.env.RPC_SERVICE_STANDARD_MINER_URL as string
config['rpc_service_kms_url'] = process.env.RPC_SERVICE_KMS_URL as string

import logger from './config/log4js'


async function bootstrapInit(){
    // 启动nacos
    // try{
    //     const options={
    //         logger:logger,
    //         config:config,
    //         serviceName:config['serviceName'],
    //         port:config['port'],
    //         nacosServerList:config['nacosServerList'],
    //         nacosServerNamespace:config['nacosServerNamespace'],
    //         nacosServerSubscribeList:config['nacosServerSubscribeList'],
    //         nacosConfigNamespace:config['nacosConfigNamespace'],
    //         nacosConfigDataIds:config['nacosConfigDataIds']
    //     }
    //     await XenonNacosClient.registerService(options)
    //     logger.info("nacos connect success!")
    // }catch (e){
    //     logger.error(e)
    //     return Promise.reject(Error("nacos register error"));
    // }

    // logger.info("config.params="+JSON.stringify(config))

    // 启动数据库
    try {
        const {db_connect} = await import('./config/db')
        await db_connect()
        logger.info("mongodb connect success!")
    }catch (e){
        logger.error("mongodb connect error="+e)
        return Promise.reject(Error("mongodb connect error"));
    }
}


bootstrapInit().then(async ()=>{
    logger.info('start web server...')
    import('./app')
        .then(async (myModule) => {
            logger.info('web server start success')
        }).catch(e=>{
            logger.info(e)
            logger.info('web server start fail ')
        });
}).catch((error) => logger.error('bootstrapInit start fail %s ',error))